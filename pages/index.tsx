import React, { useEffect } from "react";
import Head from "next/head";
import client from "../apollo-graphql/apollo-client";
import { Card } from "components/card";
import { MONSTERS_QUERY } from "apollo-graphql/queries/monsters";
import { MonstersProps } from "types/monsters";
import { hasImageInPublicFolder } from "utilities/images";
import { Select } from "components/select";
import { MonsterAC, MonsterSize, MonsterType } from "utilities/monster-filters";
import { SelectedFilter } from "components/selectedFilter";
import { Pagination } from "components/pagination";
import {
  useSelectedFilters,
  useSelectedFiltersDispatch,
} from "context/filters/filterContext";
import {
  usePagination,
  usePaginationDispatch,
} from "context/pagination/paginationContext";

export default function Home({ monstersData }: MonstersProps) {
  const [filteredList, setFilteredList] = React.useState(monstersData);

  // From context

  const { monsterSize, monsterType, monsterAC } = useSelectedFilters();
  const dispatchFilters = useSelectedFiltersDispatch();

  const {
    numberOfPages,
    resultsTotal,
    entriesPerPage,
    currentPage,
    shownItems,
  } = usePagination();
  const dispatchPagination = usePaginationDispatch();

  /*
  // @TODO: Refactor to function
*/

  const filterBySize = (filteredData: any) => {
    if (monsterSize === "ALL") {
      return filteredData;
    }
    const filteredSize = filteredData.filter(
      (monster: { size: string }) => monster.size === monsterSize
    );
    return filteredSize;
  };

  const filterByType = (filteredData: any) => {
    if (monsterType === "ALL") {
      return filteredData;
    }
    const filteredType = filteredData.filter(
      (monster: { type: string }) => monster.type === monsterType
    );
    return filteredType;
  };

  const filterByAC = (filteredData: any) => {
    if (monsterAC === "ALL") {
      return filteredData;
    }
    const filteredAC = filteredData.filter(
      (monster: { armor_class: { value: string }[] }) =>
        monster.armor_class[0].value.toString() === monsterAC
    );
    return filteredAC;
  };

  /* */

  useEffect(() => {
    let filteredData = filterBySize(monstersData);
    filteredData = filterByType(filteredData);
    filteredData = filterByAC(filteredData);
    setFilteredList(filteredData);

    dispatchPagination({
      type: "setResultsTotal",
      payload: filteredData.length,
    });
  }, [monsterSize, monsterType, monsterAC]);

  useEffect(() => {
    dispatchPagination({
      type: "setNumberOfPages",
      payload: Math.ceil(resultsTotal / entriesPerPage),
    });
  }, [resultsTotal]);

  let pageArray: any[][] = [filteredList];

  useEffect(() => {
    // go through filteredList x numberOfPages, and cut into sections of a certain size
    let foo = 0;
    pageArray = [];
    for (let i = 1; i <= numberOfPages; i++) {
      const barr = filteredList.slice(foo, (foo += entriesPerPage));

      pageArray.push(barr);
    }

    dispatchPagination({
      type: "setShownItems",
      payload: pageArray[currentPage - 1],
    });
    console.log(shownItems);
  }, [numberOfPages, currentPage]);

  return (
    <>
      <Head>
        <title>D&D 5e Monster Manual</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="container">
        <Pagination entries_per_page={entriesPerPage} />
        <div className="cards-container">
          <div className="filter-container">
            <Select
              required={false}
              label={"Monster size"}
              name={"monster-size"}
              id={"size"}
              value={monsterSize}
              onChange={(event) => {
                dispatchFilters({
                  type: "setMonsterSize",
                  payload: event.target.value,
                });
              }}
            >
              {MonsterSize.map((size) => (
                <option value={size} key={size}>
                  {size}
                </option>
              ))}
            </Select>
            <Select
              required={false}
              label={"Monster type"}
              name={"monster-type"}
              id={"type"}
              value={monsterType}
              onChange={(event) => {
                dispatchFilters({
                  type: "setMonsterType",
                  payload: event.target.value,
                });
              }}
            >
              {MonsterType.map((type) => (
                <option value={type} key={type}>
                  {type}
                </option>
              ))}
            </Select>
            <Select
              required={false}
              label={"Monster AC value"}
              name={"monster-ac"}
              id={"ac"}
              value={monsterAC}
              onChange={(event) => {
                dispatchFilters({
                  type: "setMonsterAC",
                  payload: event.target.value,
                });
              }}
            >
              {MonsterAC.map((ac) => (
                <option value={ac} key={ac}>
                  {ac}
                </option>
              ))}
            </Select>
          </div>
          <div className="selected-filter-container">
            <div className="totals">
              {resultsTotal} results. {numberOfPages} pages
            </div>
            {monsterSize !== "ALL" && (
              <SelectedFilter
                label={"Monster size"}
                selected_value={monsterSize}
                onClick={() => {
                  dispatchFilters({ type: "clearMonsterSize" });
                }}
              />
            )}
            {monsterType !== "ALL" && (
              <SelectedFilter
                label={"Monster type"}
                selected_value={monsterType}
                onClick={() => {
                  dispatchFilters({ type: "clearMonsterType" });
                }}
              />
            )}
            {monsterAC !== "ALL" && (
              <SelectedFilter
                label={"AC value"}
                selected_value={monsterAC}
                onClick={() => {
                  dispatchFilters({ type: "clearMonsterAC" });
                }}
              />
            )}
          </div>

          {shownItems.map((monster) => (
            <div className="card-container">
              <Card
                key={monster.index}
                name={monster.name}
                index={monster.index}
                image={
                  monster.image && monster.image.length > 0
                    ? `https://www.dnd5eapi.co${monster.image}`
                    : hasImageInPublicFolder.includes(monster.index)
                    ? `/images/monsters/${monster.index}.jpg`
                    : null
                }
                type={monster.type}
                size={monster.size}
                hit_points={monster.hit_points}
                armor_class_value={monster.armor_class[0].value}
              />
            </div>
          ))}
        </div>
      </main>
    </>
  );
}

export async function getStaticProps() {
  let monstersData = {} as MonstersProps;

  await client
    .query({
      query: MONSTERS_QUERY,
    })
    .then((res) => {
      monstersData = res.data.monsters;
    });

  return {
    props: {
      monstersData,
    },
  };
}
